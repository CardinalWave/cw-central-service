@startuml
class run.init {
 app.run(host="0.0.0.0", port=5000)
}

run -->main.server.app


class main.server.app {
  app.register_blueprint(user_route_bp)
}

class main.composers.users.user_login_composer {
  auth = UserAuthenticator()
  repository = UsersRepository()
  use_case = UserLogin()
  controller = UserLoginController()
  return: controller.handle
}

main.composers.users.user_login_composer --> data.use_cases.users.user_login.UserLogin
data.use_cases.users.user_login.UserLogin --> data.use_cases.users.user_authenticator.UserAuthenticator
data.use_cases.users.user_login.UserLogin --> infra.db.repositories.users.users_repository.UsersRepository
data.use_cases.users.user_login.UserLogin ----> presentation.controllers.users.user_login_controller.UserLoginController

class main.composers.users.user_logout_composer {
  auth = UserAuthenticator()
  repository = UsersRepository()
  use_case = UserLogout()
  controller = UserLogoutController()
  return: controller.handle
}

main.composers.users.user_logout_composer --> data.use_cases.users.user_logout.UserLogout
data.use_cases.users.user_logout.UserLogout --> data.use_cases.users.user_authenticator.UserAuthenticator
data.use_cases.users.user_logout.UserLogout --> infra.db.repositories.users.users_repository.UsersRepository
data.use_cases.users.user_logout.UserLogout ----> presentation.controllers.users.user_logout_controller.UserLogoutController


class data.use_cases.users.user_authenticator.UserAuthenticator {
  +login(cls, login: Login): User
  +register(cls, register: Register): User
  -__request_auth(params: any, url, action): User
}


interface domain.use_cases.users.user_authenticator.UserAuthenticatorInterface {
  +login(self, login: Login): User
  +register(self, register: Register): User
}

domain.use_cases.users.user_authenticator.UserAuthenticatorInterface <|-- data.use_cases.users.user_authenticator.UserAuthenticator


class infra.db.repositories.users.users_repository.UsersRepository {
  +insert_user(cls, token: str, email: str, username: str)
  +select_email(cls, email: str): UsersEntity
  +select_username(cls, username: str): UsersEntity
}


class presentation.controllers.users.user_login_controller.UserLoginController {
  +__init__(use_case: UserLoginInterface)
  +handle(http_request: HttpRequest):HttpResponse
}

class presentation.controllers.users.user_logout_controller.UserLogoutController {
  +__init__(use_case: UserLoginInterface)
  +handle(http_request: HttpRequest):HttpResponse
}

class main.composers.users.user_register_composer{
  auth = UserAuthenticator()
  repository = UsersRepository()
  use_case = UserRegister()
  controller = UserRegisterController()
  return: controller.handle
}


class presentation.controllers.user_register_controller.UserRegisterController {
  +__init__(use_case: UserRegisterInterface)
  +handle(http_request: HttpRequest):HttpResponse
}

main.composers.users.user_register_composer --> data.use_cases.users.user_register.UserRegister
data.use_cases.users.user_register.UserRegister --> data.use_cases.users.user_authenticator.UserAuthenticator
data.use_cases.users.user_register.UserRegister ---> presentation.controllers.users.user_register_controller.UserRegisterController

class main.adapters.request_adapter{
  return: http_response
}

interface presentation.interface.controller_interface {
  +handle(http_request: HttpRequest): HttpResponse
}

presentation.interface.users.controller_interface <|-- presentation.controllers.users.user_login_controller.UserLoginController
presentation.interface.users.controller_interface <|-- presentation.controllers.users.user_logout_controller.UserLogoutController
presentation.interface.users.controller_interface <|-- presentation.controllers.users.user_register_controller.UserRegisterController


class data.use_cases.users.user_login.UserLogin {
  +__init__(users_repository: UsersRepositoryInterface, user_authenticator: UserAuthenticatorInterface)
  +login(self, login: Login): Dict
  -__validate_email(email: str)
  -__validate_password(password: str)
  -__search_user(self, login: Login)
  -__authentication(self, login: Login): User
  -__format_response(user: User): Dict
}

interface domain.use_cases.users.user_login.UserLoginInterface {
  +login(self, login: Login): User
}

domain.use_cases.users.user_login.UserLoginInterface <|-- data.use_cases.users.user_login.UserLogin

class data.use_cases.users.user_logout.UserLogout {
  +__init__(users_repository: UsersRepositoryInterface, user_authenticator: UserAuthenticatorInterface)
  +logout(self, user: User): None
  -__authentication(self, user: User): None
  -__logout_repo(self, user: User): None
}

interface domain.use_cases.users.user_logout.UserLogoutInterface {
  +logout(self, user: User): None
}

domain.use_cases.users.user_logout.UserLogoutInterface <|-- data.use_cases.users.user_logout.UserLogout

class data.use_cases.users.user_register.UserRegister {
  +__init__(user_authenticator: UserAuthenticatorInterface)
  +register(self, register: Register): Dict
  -__validate_username(username: str)
  -__validate_email(email: str)
  -__validate_password(password: str)
  -__authentication(self, login: Login): User
  -__format_response(user: User): Dict
}


interface domain.use_cases.users.user_register.UserRegisterInterface {
  +register(self, register: Register): Dict
}

domain.use_cases.users.user_register.UserRegisterInterface <|-- data.use_cases.users.user_register.UserRegister


class infra.db.repositories.users.users_repository.UsersRepository {
  +__init__(users_repository: UsersRepositoryInterface)
  +register(first_name, last_name, age): Dict
  -__register_user_information(first_name, last_name, age)
  -__validate_name(cls, first_name)
  -__format_response(cls, user: List[Users]): Dict
}

interface infra.db.interface.users.users_repository.UsersRepositoryInterface{
  +insert_user(first_name, last_name, age)
  +select_user(first_name): List[Users]
}

infra.db.interface.users.users_repository.UsersRepositoryInterface <|-- infra.db.repositories.users.users_repository.UsersRepository

class main.composers.groups.group_join_composer {
  group_repository = GroupsRepository()
  user_group = user_group_composer()
  use_case = GroupJoin()
  controller = GroupJoinController()
}

main.composers.groups.group_join_composer ---> data.use_cases.groups.group_join.GroupJoin
data.use_cases.groups.group_join.GroupJoin ---> main.composers.users_groups_composer.user_group_composer
data.use_cases.groups.group_join.GroupJoin ---> infra.db.repositories.groups.group_repository.GroupsRepository
data.use_cases.groups.group_join.GroupJoin ----> presentation.controllers.groups.group_join_controller.GroupJoinController

class main.composers.groups.group_list_composer {
  user_group = user_group_composer()
  use_case = GroupList(user_group)
  controller = GroupListController(use_case)
}

main.composers.groups.group_list_composer ---> data.use_cases.groups.group_list.GroupList
data.use_cases.groups.group_list.GroupList ---> main.composers.users_groups_composer.user_group_composer
data.use_cases.groups.group_list.GroupList ----> presentation.controllers.groups.group_list_controller.GroupListController

class main.composers.groups.group_create_composer {
  repository = GroupsRepository()
    use_case = GroupCreate(repository)
    controller = GroupCreateController(use_case)

}

main.composers.groups.group_create_composer ---> data.use_cases.groups.group_create.GroupCreate
data.use_cases.groups.group_create.GroupCreate ---> infra.db.repositories.groups.group_repository.GroupsRepository
data.use_cases.groups.group_create.GroupCreate ----> presentation.controllers.groups.group_list_controller.GroupListController

class data.use_cases.groups.group_join.GroupJoin {
  +join(self, user: User, group: Group): UsersGroups
  +join_global(self, user: User): UsersGroups
  -__search_group(self, title: str): Group
  -__search_member(self, email: str, title: str): None
  -__register_member(self, user: User, group: Group): UsersGroups
}

interface domain.use_cases.groups.group_join.GroupJoinInterface {
  +join(self, user: User, group: Group): UsersGroups
  +join_global(self, user: User): UsersGroups
}

domain.use_cases.groups.group_join.GroupJoinInterface <|-- data.use_cases.groups.group_join.GroupJoin

class infra.db.repositories.groups.group_repository.GroupsRepository {
  +add_group(cls, id: str, title: str): GroupsEntity
  +select_title(cls, title: str): GroupsEntity
}




class domain.models.login.Login {
  +__init__(self, email: str, password: str)
  +to_dict(self): Dict
  +to_json(self): json
}

class domain.models.register.Register {
  +__init__(self, email: str, username: str, password: str)
  +to_dict(self): Dict
  +to_json(self): json
}

class domain.models.user.User {
  +__init__(self, email: str, username: str, password: str)
  +to_dict(self): Dict
  +to_json(self): json
}


main.server.app --> Flask

main.server.app ---> main.routes

main.routes. user_route_bp 

main.routes ---> main.adapters

main.routes ---> main.composers

main.routes.user_route_bp ---> main.adapters

@enduml