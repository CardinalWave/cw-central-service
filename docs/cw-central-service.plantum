@startuml
class run.init {
 app.run(host="0.0.0.0", port=5000)
}

run -->main.server.app


class main.server.app {
  app.register_blueprint(user_route_bp)
}

class main.composers.user_finder_composer {
  repository = UserRepository()
  use_case = UserFinder()
  controller = UserFinder()
  return: controller.handle
}
main.composers.user_finder_composer ---> infra.db.repositories.users_repository 
main.composers.user_finder_composer ---> presentation.controllers.user_finder_controller
main.composers.user_finder_composer ---> data.use_cases.user_finder


class infra.db.repositories.users_repository {
  +insert_user(cls, first_name, last_name, age)
  +select_user(cls, first_name): List[Users]
  
}


class presentation.controllers.user_finder_controller {
  +__init__(use_case: UserFinderInterface)
  +handle(http_request: HttpRequest):HttpResponse
}

class main.composers.user_register_composer{
  repository = UserRepository()
  use_case = UserRegister()
  controller = UserRegisterController()
  return: controller.handle
}


class presentation.controllers.user_register_controller {
  +__init__(use_case: UserRegisterInterface)
  +handle(http_request: HttpRequest):HttpResponse
}

main.composers.user_register_composer ---> infra.db.repositories.users_repository 
main.composers.user_register_composer ---> presentation.controllers.user_register_controller
main.composers.user_register_composer ---> data.use_cases.user_register

class main.adapters.request_adapter{
  return: http_response
}

interface presentation.interface.controller_interface {
  +handle(http_request: HttpRequest): HttpResponse
}

presentation.interface.controller_interface <|-- presentation.controllers.user_register_controller
presentation.interface.controller_interface <|-- presentation.controllers.user_finder_controller

class data.use_cases.user_finder {
  +__init__(user_repository: UserRepositoryInterface)
  +find(first_name): Dict
  -__validate_name(cls, first_name)
  -__format_response(cls, user: List[Users]): Dict
}

class data.use_cases.user_register {
  +__init__(user_repository: UserRepositoryInterface)
  +register(first_name, last_name, age): Dict
  -__register_user_information(first_name, last_name, age)
  -__validate_name(cls, first_name)
  -__format_response(cls, user: List[Users]): Dict
}

interface data.interfaces.users_repository{
  +insert_user(first_name, last_name, age)
  +select_user(first_name): List[Users]
}

data.interfaces.users_repositor <|-- data.use_cases.user_register
data.interfaces.users_repositor <|-- data.use_cases.user_finder

main.server.app --> Flask

main.server.app ---> main.routes

main.routes. user_route_bp 

main.routes ---> main.adapters

main.routes ---> main.composers

main.routes.user_route_bp ---> main.adapters
@enduml