@startuml
class run.init {
 app.run(host="0.0.0.0", port=5000)
}

run -->main.server.app


class main.server.app {
  app.register_blueprint(user_route_bp)
}

class main.composers.user_login_composer {
  auth = UserAuthenticator()
  repository = UsersRepository()
  use_case = UserLogin()
  controller = UserLoginController()
  return: controller.handle
}
main.composers.user_login_composer ---> data.use_cases.user_authenticator.UserAuthenticator
main.composers.user_login_composer ---> infra.db.repositories.users_repository.UsersRepository
main.composers.user_login_composer ---> presentation.controllers.user_login_controller.UserLoginController
main.composers.user_login_composer ---> data.use_cases.user_login.UserLogin


class data.use_cases.user_authenticator.UserAuthenticator {
  +login(cls, login: Login): User
  +register(cls, register: Register): User
  -__request_auth(params: any, url, action): User
}


interface domain.use_cases.user_authenticator.UserAuthenticatorInterface {
  +login(self, login: Login): User
  +register(self, register: Register): User
}

domain.use_cases.user_authenticator.UserAuthenticatorInterface <|-- data.use_cases.user_authenticator.UserAuthenticator


class infra.db.repositories.users_repository.UsersRepository {
  +insert_user(cls, token: str, email: str, username: str)
  +select_email(cls, email: str): UsersEntity
  +select_username(cls, username: str): UsersEntity
}


class presentation.controllers.user_login_controller.UserLoginController {
  +__init__(use_case: UserLoginInterface)
  +handle(http_request: HttpRequest):HttpResponse
}

class main.composers.user_register_composer{
  auth = UserAuthenticator()
  repository = UsersRepository()
  use_case = UserRegister()
  controller = UserRegisterController()
  return: controller.handle
}


class presentation.controllers.user_register_controller.UserRegisterController {
  +__init__(use_case: UserRegisterInterface)
  +handle(http_request: HttpRequest):HttpResponse
}

main.composers.user_register_composer ---> data.use_cases.user_authenticator.UserAuthenticator
main.composers.user_register_composer ---> data.use_cases.user_register.UserRegister
main.composers.user_register_composer ---> presentation.controllers.user_register_controller.UserRegisterController

class main.adapters.request_adapter{
  return: http_response
}

interface presentation.interface.controller_interface {
  +handle(http_request: HttpRequest): HttpResponse
}

presentation.interface.controller_interface <|-- presentation.controllers.user_register_controller.UserRegisterController
presentation.interface.controller_interface <|-- presentation.controllers.user_login_controller.UserLoginController

class data.use_cases.user_login.UserLogin {
  +__init__(users_repository: UsersRepositoryInterface, user_authenticator: UserAuthenticatorInterface)
  +login(self, login: Login): Dict
  -__validate_email(email: str)
  -__validate_password(password: str)
  -__search_user(self, login: Login)
  -__authentication(self, login: Login): User
  -__format_response(user: User): Dict
}


interface domain.use_cases.user_login.UserLoginInterface {
  +login(self, login: Login): User
}

domain.use_cases.user_login.UserLoginInterface <|-- data.use_cases.user_login.UserLogin


class data.use_cases.user_register.UserRegister {
  +__init__(user_authenticator: UserAuthenticatorInterface)
  +register(self, register: Register): Dict
  -__validate_username(username: str)
  -__validate_email(email: str)
  -__validate_password(password: str)
  -__authentication(self, login: Login): User
  -__format_response(user: User): Dict
}


interface domain.use_cases.user_register.UserRegisterInterface {
  +register(self, register: Register): Dict
}

domain.use_cases.user_register.UserRegisterInterface <|-- data.use_cases.user_register.UserRegister


class infra.db.repositories.users_repository.UsersRepository {
  +__init__(users_repository: UsersRepositoryInterface)
  +register(first_name, last_name, age): Dict
  -__register_user_information(first_name, last_name, age)
  -__validate_name(cls, first_name)
  -__format_response(cls, user: List[Users]): Dict
}

interface infra.db.interface.users_repository.UsersRepositoryInterface{
  +insert_user(first_name, last_name, age)
  +select_user(first_name): List[Users]
}

infra.db.interface.users_repository.UsersRepositoryInterface <|-- infra.db.repositories.users_repository.UsersRepository

class domain.models.login.Login {
  +__init__(self, email: str, password: str)
  +to_dict(self): Dict
  +to_json(self): json
}

class domain.models.register.Register {
  +__init__(self, email: str, username: str, password: str)
  +to_dict(self): Dict
  +to_json(self): json
}

class domain.models.user.User {
  +__init__(self, email: str, username: str, password: str)
  +to_dict(self): Dict
  +to_json(self): json
}


main.server.app --> Flask

main.server.app ---> main.routes

main.routes. user_route_bp 

main.routes ---> main.adapters

main.routes ---> main.composers

main.routes.user_route_bp ---> main.adapters

@enduml